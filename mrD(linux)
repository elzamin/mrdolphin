#include <QtGui>
#include <iostream>
#include <fstream>
#include <pwd.h>
#include <unistd.h>
#include <sys/sysinfo.h>
#include <vector>

using namespace std;

class Info : public QWidget
{
	Q_OBJECT

public:
	
  explicit Info(QWidget *parent = 0);

private:
	
  QLabel       * hostname;
	QLabel       * user;
	QLabel       * uptime;
	QLabel       * proc;
	QLabel       * freq;
	QLabel       * cpuload;
	QLabel       * mem;
	QLabel       * memload;
	QProgressBar * cpubar;
	QProgressBar * membar;
	QVBoxLayout  * layout;
	QHBoxLayout  * hlayout;
	vector<float> readCpuStats();
	int getCpuLoad(double dt);
	
  public slots:
  
	void update();
  
};

Info::Info(QWidget *parent) :
QWidget(parent)
{
	hostname = new QLabel("Hostname: ");
	user = new QLabel("Пользователь: ");
	uptime = new QLabel("Uptime: ");
	proc = new QLabel("Процессор: ");
	freq = new QLabel("Частота:");
	cpuload = new QLabel("Загрузка процессора: ");
	mem = new QLabel("Оперативная память: ");
	memload = new QLabel("Используемая оперативная память: ");
	cpubar = new QProgressBar;
	membar = new QProgressBar;
	layout = new QVBoxLayout;
	hlayout = new QHBoxLayout;

	cpubar->setMaximumHeight(21); membar->setMaximumHeight(21);
	hlayout->addWidget(cpuload); hlayout->addWidget(cpubar);
	layout->addWidget(hostname); layout->addWidget(user);
	layout->addWidget(uptime); layout->addWidget(proc);
	layout->addWidget(freq); layout->addLayout(hlayout);
	layout->addWidget(mem); layout->addWidget(memload);
	layout->addWidget(membar); setLayout(layout);

	update();

	QTimer *timer = new QTimer;
	connect(timer, SIGNAL(timeout()), this, SLOT(update()));
	timer->start(2000);
}

void Info::update()
{
	ifstream stream("/proc/sys/kernel/hostname"); string str;
	getline(stream, str);
	hostname->setText("Hostname: " + QString::fromStdString(str));
	uid_t uid = geteuid();
	passwd *pw = getpwuid(uid);
	user->setText("Пользователь: " + QString::fromAscii(pw->pw_name));
	struct sysinfo o;
	sysinfo(&o);
	long up = o.uptime;
	int hour = up / 60 / 60;
	int min = (up - hour * 60 * 60) / 60;
	int sec = ((up - hour * 60 * 60) - min * 60);
	QString e = QString::number(hour) + QString(" h. ") + QString::number(min) + QString(" m. ")
		+ QString::number(sec) + QString(" s.");
	uptime->setText("Uptime: " + e);
	stream.close(); stream.open("/proc/cpuinfo");
	for (int i = 0; i < 16; i++) stream >> str;
	getline(stream, str);
	proc->setText("Процессор: " + QString::fromStdString(str));
	for (int i = 0; i< 7; i++)  stream >> str;
	freq->setText("Частота: " + QString::fromStdString(str) + " MHz");
	cpubar->setValue(getCpuLoad(0.3));
	stream.close(); stream.open("/proc/meminfo");
	stream >> str; stream >> str;
	int num = atoi(str.c_str());
	int percent = num / 100;
	int gb = (num / 1024) / 1024;
	int mb = (num - gb * 1024 * 1024) / 1024;
	int kb = (num - (gb * 1024 * 1024 + mb * 1024));
	if (gb > 0)
		e = QString::number(gb) + QString(" Gb ");
	else
		e = QString("");
	if (mb > 0)
		e += QString::number(mb) + QString(" Mb ");
	if (kb > 0)
		e += QString::number(kb) + QString(" Kb ");
	mem->setText("Оперативная память: " + e);
	int free = 0;
	for (int i = 0; i < 3; i++) {
		stream >> str; stream >> str; stream >> str;
		free += atoi(str.c_str());
	}
	num -= free;
	gb = num / 1024 / 1024;
	mb = (num - gb * 1024 * 1024) / 1024;
	kb = (num - ((mb * 1024) + (gb * 1024 * 1024)));
	if (gb > 0)
		e = QString::number(gb) + QString(" Gb ");
	else
		e = QString("");
	if (mb > 0)
		e += QString::number(mb) + QString(" Mb ");
	if (kb > 0)
		e += QString::number(kb) + QString(" Kb ");
	memload->setText("Используемая оперативная память: " + e);
	percent = num / percent; membar->setValue(percent);
}

int Info::getCpuLoad(double dt)
{
	vector<float> stats1 = readCpuStats();
	QProcess::execute("sleep", QStringList() << QString::number(dt));
	vector<float> stats2 = readCpuStats();
	int size1 = stats1.size();
	int size2 = stats2.size();
	if (!size1 || !size2 || size1 != size2) return 2;
	for (int i = 0; i < size1; ++i) stats2[i] -= stats1[i];
	int sum = 1;
	for (int i = 0; i < size1; ++i) sum += stats2[i];
	int load = 100 - (stats2[size2 - 1] * 100 / sum);
	return load;
}

vector<float> Info::readCpuStats()
{
	vector<float> ret;
	ifstream stat_file("/proc/stat");
	if (!stat_file.is_open())
	{
		cout << "Unable to open /proc/stat" << std::endl;
		return ret;
	}
	int val;
	string tmp;
	stat_file >> tmp;
	for (int i = 0; i < 4; ++i)
	{
		stat_file >> val;
		ret.push_back(val);
	}
	stat_file.close();
	return ret;
}

class ProcessTable : public QWidget
{
	Q_OBJECT
public:
	explicit ProcessTable(QWidget *parent = 0);
private:
	QTableWidget * table;
	QHBoxLayout* hlayout;
	QPushButton* button;
	QVBoxLayout* layout;
	public slots:
	void update();
	void kill();
};

ProcessTable::ProcessTable(QWidget *parent) :
QWidget(parent)
{
	hlayout = new QHBoxLayout;
	button = new QPushButton("Завершить");
	button->setToolTip("Для завершения процесса вы должны выделить его PID и нажать на кнопку \"Завершить\"");
	connect(button, SIGNAL(clicked()), this, SLOT(kill()));
	hlayout->addStretch();
	hlayout->addWidget(button);
	layout = new QVBoxLayout;
	table = new QTableWidget;
	update();
	layout->addWidget(table);
	layout->addLayout(hlayout);
	this->setLayout(layout);
	QTimer *timer = new QTimer;
	connect(timer, SIGNAL(timeout()), this, SLOT(update()));
	timer->start(4000);
}

void ProcessTable::update()
{
	table->setColumnCount(2);
	table->setRowCount(0);
	QStringList list;
	list << "Name" << "PID";
	table->setHorizontalHeaderLabels(list);
	QDir * dir = new QDir("/proc");
	list = dir->entryList(QStringList("*"), QDir::AllDirs);
	foreach(QString str, list) {
		if (str.toInt()) {
			ifstream stream;

			stream.open("/proc/" + str.toAscii() + "/comm");
			string s; getline(stream, s);
			int lastRow = table->rowCount();
			QString icon = "/usr/share/icons/hicolor/32x32/apps/" + QString::fromStdString(s) + ".png";
			QFile file(icon);
			table->insertRow(lastRow);
			table->setColumnWidth(0, 150);

			if (!file.exists()) {
				icon = ":/binary.png";
			}
			table->setItem(lastRow, 0, new QTableWidgetItem(QPixmap(icon), QString::fromStdString(s)));
			table->setItem(lastRow, 1, new QTableWidgetItem(str));
		}
		else {
			continue;
		}
	}
}

void ProcessTable::kill()
{
	QList<QTableWidgetItem*> list = table->selectedItems();
	QTableWidgetItem* item = list.value(0);
	QString str = item->text();
	QProcess::execute("kill", QStringList() << str);
	update();
}

class SystemMonitor : public QWidget
{
	Q_OBJECT
public:
	explicit SystemMonitor(QWidget *parent = 0);
};

SystemMonitor::SystemMonitor(QWidget *parent) :
QWidget(parent)
{
	QTabWidget * tab = new QTabWidget;
	Info* info = new Info;
	ProcessTable* pt = new ProcessTable;
	tab->addTab(info, "Информация о системе");
	tab->addTab(pt, "Процессы");
	QVBoxLayout * layout = new QVBoxLayout;
	layout->addWidget(tab);
	this->setLayout(layout);
	this->show();
}

int main(int argc, char** argv)
{
	QTextCodec::setCodecForLocale(QTextCodec::codecForName("UTF-8"));
	QTextCodec::setCodecForTr(QTextCodec::codecForName("UTF-8"));
	QTextCodec::setCodecForCStrings(QTextCodec::codecForName("UTF-8"));
	QApplication app(argc, argv);
	QStyle * style = QStyleFactory::create("Cleanlooks");
	app.setStyle(style);
	SystemMonitor sys;
	return app.exec();
}
